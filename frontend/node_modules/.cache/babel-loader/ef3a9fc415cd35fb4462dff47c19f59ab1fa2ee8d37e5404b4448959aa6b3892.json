{"ast":null,"code":"/**\n * API service for communicating with the Math Worksheet Generator backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://k2-spiral-backend-929048657215.us-central1.run.app';\nconsole.log('API_BASE_URL:', API_BASE_URL);\n\n/**\n * Fetches all available math concepts from the backend\n * @returns {Promise<Object>} - Object containing concept categories\n */\nexport const fetchConcepts = async () => {\n  try {\n    console.log('Fetching concepts from:', `${API_BASE_URL}/concepts`);\n    const response = await fetch(`${API_BASE_URL}/concepts`);\n    console.log('Response status:', response.status);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch concepts: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log('Concepts fetched successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching concepts:', error);\n    throw error;\n  }\n};\n\n/**\n * Generates a math worksheet based on user selections\n * @param {Object} worksheetData - The worksheet configuration\n * @param {string} worksheetData.worksheet_type - \"spiral\" or \"fluency\"\n * @param {string} worksheetData.number_range - \"beginner\", \"intermediate\", or \"advanced\"\n * @param {Array<string>} worksheetData.concepts - Selected math concepts\n * @param {boolean} worksheetData.include_answer_key - Whether to include answer key\n * @returns {Promise<Blob>} - PDF blob for download\n */\nexport const generateWorksheet = async worksheetData => {\n  try {\n    console.log('Generating worksheet with data:', worksheetData);\n\n    // Create a modified copy of the data\n    const requestData = {\n      ...worksheetData,\n      // Map number_range to difficulty\n      difficulty: worksheetData.number_range,\n      // Rename problem_count to question_count if it exists\n      question_count: worksheetData.problem_count || 15\n    };\n\n    // Remove fields that the backend doesn't expect\n    delete requestData.number_range;\n    delete requestData.problem_count;\n    console.log('Sending request to:', `${API_BASE_URL}/api/generate-worksheet`);\n    console.log('Request data:', requestData);\n\n    // Use the correct API endpoint\n    const response = await fetch(`${API_BASE_URL}/api/generate-worksheet`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n    console.log('Generate worksheet response status:', response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.detail) || 'Failed to generate worksheet');\n    }\n\n    // The response now contains a download URL\n    const data = await response.json();\n    console.log('Received download URL:', data.download_url);\n\n    // Make a second request to get the actual PDF\n    console.log('Downloading PDF from:', `${API_BASE_URL}${data.download_url}`);\n    const pdfResponse = await fetch(`${API_BASE_URL}${data.download_url}`);\n    if (!pdfResponse.ok) {\n      throw new Error('Failed to download worksheet');\n    }\n    return await pdfResponse.blob();\n  } catch (error) {\n    console.error('Error generating worksheet:', error);\n    throw error;\n  }\n};\n\n/**\n * Downloads a generated worksheet as a PDF\n * @param {Blob} blob - The PDF blob\n * @param {string} filename - Name for the downloaded file\n */\nexport const downloadWorksheetPDF = (blob, filename = 'math_worksheet.pdf') => {\n  // Create a URL for the blob\n  const url = URL.createObjectURL(blob);\n\n  // Create a temporary anchor element\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n\n  // Programmatically click the link to trigger the download\n  document.body.appendChild(link);\n  link.click();\n\n  // Clean up\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","console","log","fetchConcepts","response","fetch","status","ok","Error","data","json","error","generateWorksheet","worksheetData","requestData","difficulty","number_range","question_count","problem_count","method","headers","body","JSON","stringify","errorData","catch","detail","download_url","pdfResponse","blob","downloadWorksheetPDF","filename","url","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","removeChild","revokeObjectURL"],"sources":["/Users/sravya/Desktop/K2_Spiral_Learning/frontend/src/services/api.js"],"sourcesContent":["/**\n * API service for communicating with the Math Worksheet Generator backend\n */\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://k2-spiral-backend-929048657215.us-central1.run.app';\n\nconsole.log('API_BASE_URL:', API_BASE_URL);\n\n/**\n * Fetches all available math concepts from the backend\n * @returns {Promise<Object>} - Object containing concept categories\n */\nexport const fetchConcepts = async () => {\n  try {\n    console.log('Fetching concepts from:', `${API_BASE_URL}/concepts`);\n    const response = await fetch(`${API_BASE_URL}/concepts`);\n    \n    console.log('Response status:', response.status);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch concepts: ${response.status}`);\n    }\n    \n    const data = await response.json();\n    console.log('Concepts fetched successfully:', data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching concepts:', error);\n    throw error;\n  }\n};\n\n/**\n * Generates a math worksheet based on user selections\n * @param {Object} worksheetData - The worksheet configuration\n * @param {string} worksheetData.worksheet_type - \"spiral\" or \"fluency\"\n * @param {string} worksheetData.number_range - \"beginner\", \"intermediate\", or \"advanced\"\n * @param {Array<string>} worksheetData.concepts - Selected math concepts\n * @param {boolean} worksheetData.include_answer_key - Whether to include answer key\n * @returns {Promise<Blob>} - PDF blob for download\n */\nexport const generateWorksheet = async (worksheetData) => {\n  try {\n    console.log('Generating worksheet with data:', worksheetData);\n    \n    // Create a modified copy of the data\n    const requestData = {\n      ...worksheetData,\n      // Map number_range to difficulty\n      difficulty: worksheetData.number_range,\n      // Rename problem_count to question_count if it exists\n      question_count: worksheetData.problem_count || 15\n    };\n    \n    // Remove fields that the backend doesn't expect\n    delete requestData.number_range;\n    delete requestData.problem_count;\n    \n    console.log('Sending request to:', `${API_BASE_URL}/api/generate-worksheet`);\n    console.log('Request data:', requestData);\n    \n    // Use the correct API endpoint\n    const response = await fetch(`${API_BASE_URL}/api/generate-worksheet`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestData)\n    });\n    \n    console.log('Generate worksheet response status:', response.status);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => null);\n      throw new Error(errorData?.detail || 'Failed to generate worksheet');\n    }\n    \n    // The response now contains a download URL\n    const data = await response.json();\n    console.log('Received download URL:', data.download_url);\n    \n    // Make a second request to get the actual PDF\n    console.log('Downloading PDF from:', `${API_BASE_URL}${data.download_url}`);\n    const pdfResponse = await fetch(`${API_BASE_URL}${data.download_url}`);\n    \n    if (!pdfResponse.ok) {\n      throw new Error('Failed to download worksheet');\n    }\n    \n    return await pdfResponse.blob();\n  } catch (error) {\n    console.error('Error generating worksheet:', error);\n    throw error;\n  }\n};\n\n/**\n * Downloads a generated worksheet as a PDF\n * @param {Blob} blob - The PDF blob\n * @param {string} filename - Name for the downloaded file\n */\nexport const downloadWorksheetPDF = (blob, filename = 'math_worksheet.pdf') => {\n  // Create a URL for the blob\n  const url = URL.createObjectURL(blob);\n  \n  // Create a temporary anchor element\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  \n  // Programmatically click the link to trigger the download\n  document.body.appendChild(link);\n  link.click();\n  \n  // Clean up\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}